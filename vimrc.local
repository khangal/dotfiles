" General {{{1
set t_ZH=^[[3m
set t_ZR=^[[23m

if !empty($VIM_COLORSCHEME)
    colorscheme $VIM_COLORSCHEME
else
    colorscheme tokyonight
endif

iabbrev AR ActiveRecord

augroup highlight_yank
  autocmd!
  autocmd TextYankPost * silent! lua require 'vim.highlight'.on_yank()
augroup END

autocmd BufWinEnter * if line2byte(line("$") + 1) > 1000000 | syntax clear | endif

" autocmd FileType netrw nnoremap <buffer> <leader>l <C-l>
au FileType netrw nnoremap <buffer> <C-l> <C-w>l

" Keymap switch {{{1
set keymap=mongolian
set keymap=""
set mouse=

let g:is_mongolian = 0
function! g:ToggleKeymap()
  if g:is_mongolian
    set keymap=
    let g:is_mongolian = 0
    echom "(en)"
  else
    set keymap=mongolian
    let g:is_mongolian = 1
    echom "(mn)"
  endif
endfunction

nnoremap <A-l>:call ToggleKeymap()<CR>
inoremap <A-l> <C-o>:call ToggleKeymap()<CR>
cnoremap <A-l> <C-^>
cnoremap <esc>o <home>let @x="<end>"<cr>:call ToggleKeymap()<cr>:<c-r>x

function! ToggleQuickFix()
    if getqflist({'winid' : 0}).winid
        cclose
    else
        copen
    endif
endfunction

command! -nargs=0 -bar ToggleQuickFix call ToggleQuickFix()
command! -bang -nargs=? -complete=dir ProjectFiles call fzf#vim#files(<q-args>, <bang>0)

nnoremap yoq :ToggleQuickFix<CR>
imap <silent><expr> <S-Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<S-Tab>' 
" imap <silent><expr> <C-l> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<C-l>' 

" Alt mappings {{{1
nnoremap <silent> <A-d> :set hlsearch!<CR>
nnoremap <A-t> :call ToggleBackground()<CR>
nnoremap <A-T> :call ToggleBackgroundForce()<CR>

" Show syntax highlighting groups for word under cursor
nmap <A-e> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction

" Functions {{{1
function! g:JsThisMap()
  normal ^yef:wv$hpA,F:lathis.
endfunction

function! ClearWhitespace()
  retab
  exec RemoveTrailingWhitespace()
endfunction

function! RemoveTrailingWhitespace()
  %s/\s\+$//e
endfunction

function! RocketFix()
  %s/:\([^=,'"]*\) =>/\1:/gc
endfunction

function! ClearInvisibles()
  silent! %s/â€‹//g
  silent! %s/\%u00a0//g
endfunction

if !exists(":Iex")
  command -nargs=0 Iex Start iex -S mix
endif

" Vim Folding {{{1
hi Folded ctermbg=Black ctermfg=DarkBlue

augroup vimrc
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim setlocal foldlevel=0
  autocmd FileType vim setlocal foldlevelstart=20
augroup END

" {{{1 FileType
augroup ale
  autocmd!
augroup END

augroup vue
  autocmd!
  autocmd FileType vue highlight htmlItalic term=NONE cterm=NONE gui=NONE
augroup END

augroup php
    autocmd FileType php setlocal shiftwidth=4
augroup END

augroup elixir
  autocmd FileType elixir setlocal textwidth=92
augroup END


" Bundle configs {{{1
" vim-test {{{2
" jank/vim-test and mfussenegger/nvim-dap
nnoremap <leader>dd :TestNearest<CR>
" function! JestStrategy(cmd)
"   let testName = matchlist(a:cmd, '\v -t ''(.*)''')[1]
"   let fileName = matchlist(a:cmd, '\v'' -- (.*)$')[1]
"   call luaeval("require'tools.debugHelper'.debugJest([[" . testName . "]], [[" . fileName . "]])")
" endfunction      
" let g:test#custom_strategies = {'jest': function('JestStrategy')}

let test#strategy = "neovim"
" let test#javascript#vitest#options = '--inspect-brk --no-file-parallelism --testTimeout=0'
" let test#javascript#jest#executable = "docker exec --tty bbzz-api yarn test"
" let test#javascript#cypress#options = '--headless'
" let test#javascript#jest#options = '--detectOpenHandles'

let test#elixir#exunit#options = {
  \ 'nearest': '--only wip',
\}

let test#ruby#rspec#options = {}
let test#ruby#use_binstubs = 0

let test#rust#cargotest#options = '-- --nocapture'


nnoremap <leader>td <cmd>lua vim.lsp.buf.type_definition()<CR>
" Goyo {{{2
nnoremap <Leader>g :Goyo<CR>

let g:goyo_width = 130
let g:goyo_linenr = 1

function! s:goyo_enter()
  set cursorline
endfunction

function! s:goyo_leave()
  set cursorline!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Enable Emmet just for HTML/CSS/ERB {{{2
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<C-l>'
let g:user_emmet_mode='a'
let g:user_emmet_complete_tag = 1
augroup emmet
  autocmd FileType html,css,javascript,eruby,eco,php,htmljinja,eelixir,vue,typescriptreact EmmetInstall
augroup END
imap <C-l> <Plug>(emmet-expand-abbr)

" EasyAlign {{{2
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Ultisnips {{{2
" let g:UltiSnipsExpandTrigger = "<s-tab>"
" inoremap <c-j> <C-R>=UltiSnips#ListSnippets()<cr>

" Fzf {{{2
let $FZF_DEFAULT_OPTS="--ansi --preview 'right:60%' --layout reverse --margin=1,4 --preview 'bat --color=always --style=header,grid --line-range :300 {}'"

" command! -bang Colors
"       \ call fzf#vim#colors('--no-preview', <bang>0)
" command! -bang Colors
"       \ call fzf#vim#colors('', {'options': '--no-preview'}, <bang>0)
" command! -bang Colors
"       \ call fzf#vim#colors('', {'options': '--no-preview'}, <bang>0)

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using Vim function
" inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" {{{2 DelimitMate
let delimitMate_autoclose = 1
let delimitMate_jump_expansion = 0
let delimitMate_expand_space = 1
let delimitMate_expand_cr = 1
let delimitMate_expand_inside_quotes = 1

" {{{2 ALE
let g:ale_lint_on_text_changed = "never"
let g:ale_lint_on_enter = 0
let g:ale_sign_error = 'âœ˜'
let g:ale_sign_warning = 'â„¹'
highlight clear SignColumn
" let g:ale_linter_aliases = {'vue': ['vue', 'javascript'], 'deno': ['denols', 'deno']}
" let g:ale_deno_lsp_project_root = '/home/khangal/work/andex/avenue'

" let g:ale_linters = {
"   \ 'vue': ['eslint', 'vls'],
"   \ 'go': ['gofmt'],
"   \ }

" \ 'typescriptreact': ['prettier', 'eslint'],
" \ 'typescript': ['prettier', 'eslint', 'deno'],

let g:ale_fixers = {
   \ 'vue': ['prettier', 'eslint'],
   \ 'javascript': ['prettier', 'eslint'],
   \ 'ruby': ['rufo'],
   \ 'css': ['prettier'],
   \ 'xml': ['prettier'],
   \ 'json': ['prettier'],
   \ 'go': ['gofmt'],
   \ 'typescript': ['prettier', 'eslint', 'deno'],
   \ 'typescriptreact': ['prettier', 'eslint'],
   \ 'rust': ['rustfmt'],
   \ }

" \ '*': ['prettier'],
" let g:ale_fixers = ['prettier', 'eslint',' rubocop ']
" let g:ale_pattern_options = {
" \   '\.env$': {'ale_fixers': []},
" \}
let g:ale_fix_on_save = 0

" {{{1 Language server
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set fillchars=fold:\ 
highlight Folded ctermfg=10

autocmd BufNewFile,BufRead *.eta setfiletype html
" autocmd FileType typescript let b:ale_linter = ['eslint']
" autocmd FileType typescript let b:ale_fixer = ['eslint']

" inspect
" for normal mode - the word under the cursor
nmap <Leader>di <Plug>VimspectorBalloonEval
" for visual mode, the visually selected text
xmap <Leader>di <Plug>VimspectorBalloonEval

let g:db_ui_execute_on_save = '0'

autocmd FileType sql map <buffer> <C-Enter> <Plug>(DBUI_ExecuteQuery)

autocmd FileType sql vmap <buffer> <C-k> <Plug>(DBUI_ExecuteQuery)
" autocmd FileType vim nmap <Leader>db <Plug>VimspectorBreakpoints
autocmd FileType sql setlocal omnifunc=vim_dadbod_completion#omni
