":1 General
set relativenumber
set complete=.,w,b,u,t
set autoread

set ignorecase " Case-insensitive searching.
set smartcase  " But case-sensitive if expression contains a capital letter.

set tags+=.git/tags

set iminsert=0
set imsearch=-1

" Keymap switch
noremap <F1> <ESC>

" map! <F1> <ESC>
inoremap <F1> <C-^>
cnoremap <F1> <C-^>
call tcomment#DefineType('eelixir', '<%%# %s %%>' )

iabbrev AR ActiveRecord

":1 Colorscheme
set background=dark
colorscheme solarized

" Magenta - 13, White(base3) - 15
highlight IncSearch cterm=bold ctermbg=13 ctermfg=15

" base03  = 8
" base02  = 0
" base01  = 10
" base00  = 11
" base0   = 12
" base1   = 14
" base2   = 7
" base3   = 15
" yellow  = 3
" orange  = 9
" red     = 1
" magenta = 5
" violet  = 13
" blue    = 4
" cyan    = 6
" green   = 2

" if has('termguicolors')
"   let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"   let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"   let &t_Co = 256
"   set termguicolors
" endif

":1 Status line
function! s:statusline_expr()
  let mod = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"

  let ro  = "%{&readonly ? '[RO] ' : ''}"
  let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
  let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  let sep = ' %= '
  let pos = ' %-12(%l : %c%V%) '
  let pct = ' %P'

  return '[%n] %F %<'.mod.ro.ft.fug.sep.pos.'%*'.pct
endfunction
let &statusline = s:statusline_expr()

":1 Mappings
noremap <C-s> <esc>:w<CR>
inoremap <C-s> <esc>:w<CR>
nnoremap <C-f> :GitFiles<CR>
" search word under cursor
nnoremap <silent> K :Ag <C-r><C-w><CR>
" for convenience
nnoremap <Leader>ci :source ~/.vimrc.local<cr>
nnoremap <Leader>bi :source ~/.vimrc.local<cr>:PlugInstall<cr>

" quick open
noremap <Leader>vo :tabe ~/dotfiles-local<CR>
noremap <Leader>vi :tabe ~/dotfiles-local/vimrc.local<CR>
noremap <Leader>vb :tabe ~/dotfiles-local/vimrc.bundles.local<CR>:vsplit ~/dotfiles/vimrc.bundles<CR><C-w><C-w>
noremap <Leader>q :tabe ~/.ideas.markdown<CR>
noremap <Leader>co mmggVG"*y`m
noremap <Leader>eo mmf>a<CR><esc>$F<i<CR><esc>`m

" notebook
cnoremap ^[[D <C-Left>
cnoremap ^[[C <C-Right>

" Emacs-like beginning and end of line.
inoremap <c-e> <c-o>$
inoremap <c-a> <c-o>^

inoremap <C-K> <CR><c-o>O
cnoreabbrev Q q

" Execute macro in q
noremap Q @q

noremap <Leader>p :set paste<CR><esc>"+p:set nopaste<cr>:retab<cr>
vnoremap <C-c> "+y
vnoremap <leader>k y:Ag <c-r>"<cr>

":1 Alt mappings (doesn't work in insert mode)
nnoremap <silent> d :set hlsearch!<CR>
" fzf search all files
nnoremap f :Files<CR>

":1 Stolen functions
function! RocketFix()
  %s/:\([^=,'"]*\) =>/\1:/gc
endfunction

":1 Vim Folding
set foldlevelstart=20

function! g:VimFoldText()
  let l:line = getline(v:foldstart)
  let l:trimmed = substitute(l:line, '^\s*\(.\{-}\)\s*$', '\1', '')
  let l:leading_spaces = stridx(l:line, l:trimmed)
  let l:prefix = repeat(' ', l:leading_spaces)
  let l:size = strlen(l:trimmed)

  let l:trimmed = strpart(l:trimmed, 4, l:size - 4)
  return l:prefix . 'â–¸   ' . l:trimmed
endfunction

augroup vimrc
  autocmd FileType vim setlocal foldmethod=marker foldmarker=\"\:,\"\ endfold foldtext=g:VimFoldText()
  autocmd FileType vim setlocal foldlevel=0
augroup END

":1 Bundle configs
":2 vim-test
let test#strategy = {
  \ 'file':    'basic',
\}

let test#elixir#exunit#options = {
  \ 'nearest': '--only wip',
\}

":2 Goyo
nnoremap <Leader>g :Goyo<CR>

function! s:goyo_enter()
  set cursorline
endfunction

function! s:goyo_leave()
  set cursorline!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

":2 Enable Emmet just for HTML/CSS/ERB
let g:user_emmet_install_global = 0
augroup emmet
  autocmd FileType html,css,javascript,eruby,eco,php,htmljinja,eelixir EmmetInstall
augroup END

let g:user_emmet_expandabbr_key = '<C-l>'
let g:user_emmet_complete_tag = 1

":2 EasyAlign
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

":2 Ultisnippets
let g:UltiSnipsExpandTrigger="<s-tab>"
" let g:UltiSnipsJumpForwardTrigger="<s-tab>"
" inoremap <c-j> <C-R>=UltiSnips#ListSnippets()<cr>
