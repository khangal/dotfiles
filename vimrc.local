set relativenumber
" set hlsearch
set complete=.,w,b,u,t
set autoread
silent! map <F2> :set hlsearch!<CR>

let test#elixir#exunit#options = {
  \ 'nearest': '--only wip',
\}

" woow: :e ++ff=dos

" let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'
" let g:FZF_DEFAULT_COMMAND = 'ag -Q -l --nocolor --hidden -g "" %s'
nmap <C-f> :GitFiles<CR>

set keymap=mongolian
set iminsert=0
set imsearch=-1

" Keymap switch
imap <F1> <C-^>
cmap <F1> <C-^>

":1 Colorscheme
set background=dark
colorscheme solarized

" Magenta - 13, White(base3) - 15
highlight IncSearch cterm=bold ctermbg=13 ctermfg=15

" base03  = 8
" base02  = 0
" base01  = 10
" base00  = 11
" base0   = 12
" base1   = 14
" base2   = 7
" base3   = 15
" yellow  = 3
" orange  = 9
" red     = 1
" magenta = 5
" violet  = 13
" blue    = 4
" cyan    = 6
" green   = 2

" if has('termguicolors')
"   let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"   let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"   let &t_Co = 256
"   set termguicolors
" endif

":1 Status line
function! s:statusline_expr()
  let mod = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
  let ro  = "%{&readonly ? '[RO] ' : ''}"
  let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
  let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  let sep = ' %= '
  let pos = ' %-12(%l : %c%V%) '
  let pct = ' %P'

  return '[%n] %F %<'.mod.ro.ft.fug.sep.pos.'%*'.pct
endfunction
let &statusline = s:statusline_expr()

":1 Mappings
nmap <Leader>ci :source ~/.vimrc.local<cr>
nmap <Leader>bi :source ~/.vimrc.local<cr>:PlugInstall<cr>
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
map <Leader>g :Goyo<CR>

" quick open
map <Leader>vo :tabe ~/dotfiles-local<CR>
map <Leader>vi :tabe ~/dotfiles-local/vimrc.local<CR>
map <Leader>vb :tabe ~/dotfiles-local/vimrc.bundles.local<CR>:vsplit ~/dotfiles/vimrc.bundles<CR><C-w><C-w>
map <Leader>q :tabe ~/.ideas.markdown<CR>
map <Leader>co mmggVG"*y`m
map <Leader>eo mmf>a<CR><esc>$F<i<CR><esc>`m

" notebook
cnoremap ^[[D <C-Left>
cnoremap ^[[C <C-Right>

" Emacs-like beginning and end of line.
imap <c-e> <c-o>$
imap <c-a> <c-o>^

imap <C-k> <CR><c-o>O
cnoreabbrev Q q

" Execute macro in q
map Q @q

map <Leader>p :set paste<CR><esc>"+p:set nopaste<cr>:retab<cr>
vnoremap <C-c> "+y

" bind K to grep word under cursor
" nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

":1 EasyAlign
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

":1 Ultisnippets
let g:UltiSnipsExpandTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<s-tab>"

":1 Enable Emmet just for HTML/CSS/ERB
let g:user_emmet_install_global = 0
autocmd FileType html,css,javascript,eruby,eco,php,htmljinja,eelixir EmmetInstall

let g:user_emmet_expandabbr_key = '<C-l>'
let g:user_emmet_complete_tag = 1

":1 ALE
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = "never"
let g:ale_lint_on_save = 0
" let g:ale_python_flake8_options = "--max-line-length=100 --inline-quotes '\"' ."
let g:ale_python_flake8_args = '--select F'

autocmd FileType elixir ALEDisable
nmap <silent> <Leader>a :ALELint<CR>
nmap <silent> <Leader>k <Plug>(ale_previous_wrap)
nmap <silent> <Leader>j <Plug>(ale_next_wrap)

":1 Goyo
function! s:goyo_enter()
  set cursorline
endfunction

function! s:goyo_leave()
  set cursorline!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
" endfold

":1 Folding
augroup vimrc
  autocmd!
augroup END

if filereadable($HOME . "/dotfiles-munkhbaatar/filetypes.vim")
  source ~/dotfiles-munkhbaatar/filetypes.vim
endif

autocmd FileType yaml setlocal foldmethod=indent
autocmd FileType yaml setlocal foldlevel=1
autocmd FileType html,htmljinja setlocal textwidth=140
autocmd FileType elixir setlocal textwidth=98
autocmd FileType python setlocal textwidth=100
autocmd FileType python nmap <Leader>t :!python %<cr>

if !exists(":Iex")
  command! Iex Dispatch !iex -S mix
  " command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  " nnoremap \ :Ag<SPACE>
endif
