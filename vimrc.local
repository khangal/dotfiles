" General {{{1
set t_ZH=^[[3m
set t_ZR=^[[23m
nohl
set termguicolors

if !empty($VIM_COLORSCHEME)
    colorscheme $VIM_COLORSCHEME
else
    colorscheme nightfox
endif

set relativenumber
set complete=.,w,b,u,t
set autoread

set ignorecase " Case-insensitive searching.
set smartcase  " But case-sensitive if expression contains a capital letter.

set tags+=.git/tags

set iminsert=0
set imsearch=-1
let maplocalleader = ","

" TODO: expirement
" set numberwidth=1


" call tcomment#DefineType('eelixir', '<%%# %s %%>' )

iabbrev AR ActiveRecord

silent! nunmap <Left>
silent! nunmap <Right>
silent! nunmap <Up>
silent! nunmap <Down>

augroup highlight_yank
  autocmd!
  autocmd TextYankPost * silent! lua require 'vim.highlight'.on_yank()
augroup END

function! s:statusline_expr()
  let mod = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"

  let ro  = "%{&readonly ? '[RO] ' : ''}"
  let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
  let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  let sep = ' %= '
  " let uni = ' %B  ðŸ˜‹ '
  let uni = ' %B :'
  let pos = ' %-12(%l : %c%V%) '
  let pct = ' %P'

  return '[%n] %F %<'.mod.ro.ft.fug.sep.uni.pos.'%*'.pct
endfunction
let &statusline = s:statusline_expr()

autocmd BufWinEnter * if line2byte(line("$") + 1) > 1000000 | syntax clear | endif

set pumheight=20
" autocmd FileType netrw nnoremap <buffer> <leader>l <C-l>
au FileType netrw nnoremap <buffer> <C-l> <C-w>l

" Keymap switch {{{1
set keymap=mongolian
set keymap=""
set mouse=

let g:is_mongolian = 0
function! g:ToggleKeymap()
  if g:is_mongolian
    set keymap=
    let g:is_mongolian = 0
    echom "(en)"
  else
    set keymap=mongolian
    let g:is_mongolian = 1
    echom "(mn)"
  endif
endfunction

nnoremap <A-l> :call ToggleKeymap()<CR>
inoremap <A-l> <C-o>:call ToggleKeymap()<CR>
cnoremap <A-l> <C-^>
cnoremap <esc>o <home>let @x="<end>"<cr>:call ToggleKeymap()<cr>:<c-r>x

function! ToggleQuickFix()
    if getqflist({'winid' : 0}).winid
        cclose
    else
        copen
    endif
endfunction

command! -nargs=0 -bar ToggleQuickFix call ToggleQuickFix()
command! -bang -nargs=? -complete=dir ProjectFiles call fzf#vim#files(<q-args>, <bang>0)

nnoremap yoq :ToggleQuickFix<CR>

"Mappings {{{1
noremap <C-s> <esc>:w<CR>
inoremap <C-s> <esc>:w<CR>

" Netrw
" nnoremap <unique> <f5> <Plug>NetrwRefresh
nnoremap <f5> <Plug>NetrwRefresh

" for convenience
nnoremap <Leader>ci :source ~/.vimrc.local<cr>:source ~/.vimrc.bundles.local<cr>
nnoremap <Leader>bi :source ~/.vimrc.local<cr>:PlugInstall<cr>

" quick open
noremap <Leader>vo :tabe ~/dotfiles-local<CR>:lcd %:p:h<CR>
noremap <Leader>vt :tabe ~/dotfiles/vimrc<CR>:lcd %:p:h<CR>
noremap <Leader>vi :tabe ~/dotfiles-local/vimrc.local<CR>:lcd %:p:h<CR>
noremap <Leader>vb :tabe ~/dotfiles-local/vimrc.bundles.local<CR>:vsplit ~/dotfiles/vimrc.bundles<CR><C-w><C-w>:lcd %:p:h<CR>
noremap <Leader>q :tabe ~/.ideas.markdown<CR>:lcd %:p:h<CR>

" notebook
cnoremap ^[[D <C-Left>
cnoremap ^[[C <C-Right>

" if has('nvim')
  " tnoremap <Esc> <C-\><C-n>
  " tnoremap <M-[> <Esc>
  " tnoremap <C-v><Esc> <Esc>
" endif

" run Elixir formatter
" noremap <Leader>f :!mix format %<cr>
" autocmd Filetype javascript,typescript,jsx,vue,json,ruby noremap <Leader>f :ALEFix<CR>
noremap <Leader>d :ALEFix<CR>
" run lsp optimize import
noremap <Leader>o :OrganizeImports<CR>

autocmd Filetype txt nunmap <buffer> <c-]>

" Emacs-like beginning and end of line.
inoremap <c-e> <c-o>$
inoremap <c-a> <c-o>^

inoremap <C-K> <CR><c-o>O
cnoreabbrev Q q

" search word under cursor
nnoremap <silent><Leader>kw :S <C-r><C-w><CR>
nnoremap <silent><Leader>ke :S <C-r><C-w><CR>
" search current file
nnoremap <silent><Leader>kf :S %:t:r<CR>

noremap <Leader>p :set paste<CR><esc>"+p:set nopaste<cr>:retab<cr>
vnoremap <C-c> "+y
vnoremap <leader>k y:S <c-r>"<cr>

nmap <C-_><C-_> gcc
vmap <C-_><C-_> gc
" nnoremap <c-_><c-_> gcc
noremap gb :GBranches<CR>
noremap go :Git<CR>
noremap <A-1> 1gt
noremap <A-2> 2gt
noremap <A-3> 3gt
noremap <A-4> 4gt
noremap <A-5> 5gt
noremap <A-6> 6gt

" Alt mappings {{{1
nnoremap <silent> <A-d> :set hlsearch!<CR>
set nohlsearch
nnoremap <A-t> :call ToggleBackground()<CR>
nnoremap <A-T> :call ToggleBackgroundForce()<CR>

" Show syntax highlighting groups for word under cursor
nmap <A-e> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction


" Functions {{{1
function! g:JsThisMap()
  normal ^yef:wv$hpA,F:lathis.
endfunction

function! ClearWhitespace()
  retab
  exec RemoveTrailingWhitespace()
endfunction

function! RemoveTrailingWhitespace()
  %s/\s\+$//e
endfunction

function! RocketFix()
  %s/:\([^=,'"]*\) =>/\1:/gc
endfunction

function! ClearInvisibles()
  silent! %s/â€‹//g
  silent! %s/\%u00a0//g
endfunction

if !exists(":Iex")
  command -nargs=0 Iex Start iex -S mix
endif

" Vim Folding {{{1
hi Folded ctermbg=Black ctermfg=DarkBlue
set foldmethod=syntax
set foldlevelstart=99

augroup vimrc
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim setlocal foldlevel=0
  autocmd FileType vim setlocal foldlevelstart=20
augroup END

" {{{1 FileType
augroup ale
  autocmd!
augroup END

augroup vue
  autocmd!
  autocmd FileType vue highlight htmlItalic term=NONE cterm=NONE gui=NONE
augroup END

augroup php
    autocmd FileType php setlocal shiftwidth=4
augroup END

augroup elixir
  autocmd FileType elixir setlocal textwidth=92
augroup END


" Bundle configs {{{1
" vim-test {{{2
" jank/vim-test and mfussenegger/nvim-dap
nnoremap <leader>dd :TestNearest -strategy=jest<CR>
function! JestStrategy(cmd)
  let testName = matchlist(a:cmd, '\v -t ''(.*)''')[1]
  let fileName = matchlist(a:cmd, '\v'' -- (.*)$')[1]
  call luaeval("require'tools.debugHelper'.debugJest([[" . testName . "]], [[" . fileName . "]])")
endfunction      
let g:test#custom_strategies = {'jest': function('JestStrategy')}

let test#strategy = "neovim"
" let test#javascript#jest#executable = "docker exec --tty bbzz-api yarn test"
" let test#javascript#cypress#options = '--headless'
" let test#javascript#jest#options = '--detectOpenHandles'

let test#elixir#exunit#options = {
  \ 'nearest': '--only wip',
\}

let test#ruby#rspec#options = {}
let test#ruby#use_binstubs = 0

let test#rust#cargotest#options = '-- --nocapture'

" Goyo {{{2
nnoremap <Leader>g :Goyo<CR>

let g:goyo_width = 130
let g:goyo_linenr = 1

function! s:goyo_enter()
  set cursorline
endfunction

function! s:goyo_leave()
  set cursorline!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Enable Emmet just for HTML/CSS/ERB {{{2
let g:user_emmet_install_global = 0
augroup emmet
  autocmd FileType html,css,javascript,eruby,eco,php,htmljinja,eelixir,vue,typescriptreact EmmetInstall
augroup END

let g:user_emmet_expandabbr_key = '<C-l>'
let g:user_emmet_complete_tag = 1

" EasyAlign {{{2
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Ultisnips {{{2
let g:UltiSnipsExpandTrigger = "<s-tab>"
inoremap <c-j> <C-R>=UltiSnips#ListSnippets()<cr>

" Fzf {{{2
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --layout reverse --margin=1,4 --preview 'bat --color=always --style=header,grid --line-range :300 {}'"

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using Vim function
" inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" {{{2 DelimitMate
let delimitMate_autoclose = 1
let delimitMate_jump_expansion = 0
let delimitMate_expand_space = 1
let delimitMate_expand_cr = 1
let delimitMate_expand_inside_quotes = 1

" {{{2 ALE
let g:ale_lint_on_text_changed = "never"
let g:ale_lint_on_enter = 0
let g:ale_sign_error = 'âœ˜'
let g:ale_sign_warning = 'â„¹'
highlight clear SignColumn
let g:ale_linter_aliases = {'vue': ['vue', 'javascript']}
let g:ale_linters = {
  \ 'vue': ['eslint', 'vls'],
  \ 'go': ['gofmt']
  \ }
let g:ale_fixers = {
   \ 'typescriptreact': ['prettier', 'eslint'],
   \ 'vue': ['prettier', 'eslint'],
   \ 'typescript': ['prettier', 'eslint'],
   \ 'javascript': ['prettier', 'eslint'],
   \ 'ruby': ['rufo'],
   \ 'css': ['prettier'],
   \ 'xml': ['prettier'],
   \ 'json': ['prettier'],
   \ 'go': ['gofmt']
   \ }
" \ '*': ['prettier'],
" let g:ale_fixers = ['prettier', 'eslint',' rubocop ']
let g:ale_pattern_options = {
\   '\.env$': {'ale_fixers': []},
\}
let g:ale_fix_on_save = 0

" {{{1 Language server

set completeopt=menuone,noselect
" autocmd Filetype elixir,eelixir,css,scss,javascript,rust setlocal omnifunc=v:lua.vim.lsp.omnifunc

" Code formatting on save
" augroup rust.vim.PreWrite
"     autocmd!
"     " autocmd BufWritePre *.rs silent! call rustfmt#PreWrite()
"     autocmd BufWritePre *.rs lua vim.lsp.buf.formatting()
" augroup END


set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set fillchars=fold:\ 
highlight Folded ctermfg=10

set textwidth=0
set cursorline
set nospell

autocmd BufNewFile,BufRead *.eta setfiletype html

" Lua migration {{{1

lua <<EOF
 require('tools.main')
EOF

" inspect
" for normal mode - the word under the cursor
nmap <Leader>di <Plug>VimspectorBalloonEval
" for visual mode, the visually selected text
xmap <Leader>di <Plug>VimspectorBalloonEval
